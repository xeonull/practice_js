/*  Dependency Inversion Principle
    Принцип инверсии зависимости

    - Модули верхних уровней не должны импортировать сущности (или зависеть от сущностей) из модулей нижних уровней. Оба типа модулей должны зависеть от абстракций (например, от интерфейсов).
    - Абстракции не должны зависеть от деталей. Детали (конкретные реализации) должны зависеть от абстракций.
*/

interface INotify {
  notify(message: string): void;
}

class Logger implements INotify {
  notify(message: string): void {
    console.log(message);
  }
}

// Не используем напрямую ссылку на класс Logger,
// вместо этого зависим только от интрефейса
class Order {
  constructor(private notifier: INotify) {}
  create() {
    this.notifier.notify("Order created");
  }
}

// Данный принцип реализуется с помощью Dependency Injection - передаем зависимый объект в constructor:
const order = new Order(new Logger());

/*
  Inversion of Control (IoC)

Инверсия управления (IoC, Inversion of Control) – это достаточно общее понятие, которое отличает библиотеку от фреймворка.
Классическая модель подразумевает, что вызывающий код контролирует внешнее окружение и время и порядок вызова библиотечных методов.
Однако в случае фреймворка обязанности меняются местами: фреймворк предоставляет некоторые точки расширения, через которые он вызывает определенные методы пользовательского кода.

Простой метод обратного вызова или любая другая форма паттерна Наблюдатель является примером инверсии.
Зная значение понятия IoC становится ясно, что такое понятие как IoC-контейнер лишено смысла, если только данный «контейнер» не предназначен для упрощения создания фрейморков.


  Dependency Injection (DI)

Внедрение зависимостей (DI, Dependency Injection) – это механизм передачи классу его зависимостей. 
Существует несколько конкретных видов или паттернов внедрения зависимостей:
 - через конструктор (Constructor Injection);
 - через метод (Method Injection);
 - через свойство (Property Injection).
 Разные виды внедрения зависимостей предназначены для решения определенных задач.
 Через конструктор передаются обязательные зависимости класса, без которых работа класса невозможна.
 Через метод передаются зависимости, которые нужны лишь одному методу, а не всем методам класса.
 Через свойства должны устанавливаться лишь необязательные зависимости (обычно, инфраструктурные), для которых существует значение по умолчанию.

Очень важно понимать, что DI-паттерны не говорят, что за зависимость передается, к какому уровню она относится, должна ли быть она у этого класса или нет.
Это лишь инструмент передачи зависимостей от одного класса другому.


  Dependency Inversion Principle (DIP)

Принцип инверсии зависимости говорит о том, к каким видам зависимостей нужно стремиться.
Важно, чтобы зависимости класса были понятны и важны вызывающему коду. 
Зависимости класса должны располагаться на текущем или более высоком уровне абстракции.
Другими словами, не любой класс, который требует интерфейс в конструкторе следует принципу инверсии зависимостей.


  В итоге:

Инверсия управления (IoC) говорит об изменении потока исполнения, присуща фреймворкам и функциям обратного вызова и не имеет никакого отношения к управлению зависимостями.
Передача зависимостей (DI) - это инструмент передачи классу его зависимости через конструктор, метод или свойство.
Принцип инверсии зависимостей (DIP) - это принцип проектирования, который говорит, что классы должны зависеть от высокоуровневых абстракций.
*/